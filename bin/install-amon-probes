#!/usr/bin/bash
# vi: expandtab sw=4 ts=4
#
# Install Amon probes for DAPI
#

if [[ -n "$TRACE" ]]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit


#---- globals, config

res_status=
res_body=

AMON_ADMIN_IPS=$(json amon_admin_ips < /var/tmp/metadata.json)
UFDS_ADMIN_UUID=$(json ufds_admin_uuid < /var/tmp/metadata.json)
AMON_URL=http://$(echo $AMON_ADMIN_IPS | cut -d, -f1)


#---- functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

# Call the amon master.
function amon() {
    local path=$1
    shift
    local curl_args="-sS -i -H accept:application/json -H content-type:application/json"
    local res=$(curl $curl_args --url "$AMON_URL$path" "$@")
    res_status=$(echo "$res" | head -1 | awk '{print $2}')
    res_body=$(echo "$res" | json -Hq)
}

function putprobe() {
    local account=$1
    local payload=$2
    local pname=$(echo "$payload" | json name)
    if [[ -z "$pname" ]]; then
        fatal "No 'name' for probe: $payload"
    fi
    amon /pub/$account/probes
    local probe_uuid=$(echo "$res_body" | json -H -c "name == '$pname'" -a uuid)
    if [[ "$res_status" != "200" ]]; then
        fatal "Error looking for probe '$pname': $res_status $res_body"
    elif [[ -n "$probe_uuid" ]]; then
        echo "Probe '$pname' already exists: $probe_uuid"
    else
        echo "Create probe '$pname'."
        amon /pub/$account/probes -X POST -f --data "$payload"
    fi
}



#---- mainline

zonename=$(zonename)
account=$UFDS_ADMIN_UUID

# Sanity check that amon-master is up.
amon /ping -f || fatal "amon-master ping failed: $res_status $res_body"

# We'll create a single probe group for this DAPI zone.
# It would be nice to name it after the zone *alias*, but
# we'd need to depend on VMAPI to get that: overkill.
group_name=dapi-$zonename
amon /pub/$account/probegroups
group_uuid=$(echo "$res_body" | json -H -c "name == '$group_name'" -a uuid)
if [[ "$res_status" != "200" ]]; then
    fatal "Error looking for '$group_name' probe group: $res_status $res_body"
elif [[ -n "$group_uuid" ]]; then
    echo "Probe group '$group_name' already exists: $group_uuid"
else
    echo "Create probe group '$group_name'."
    amon /pub/$account/probegroups -X POST -f -d "{
      \"name\": \"$group_name\",
      \"contacts\": [\"email\"]
    }"
    group_uuid=$(echo "$res_body" | json -H uuid)
fi


# Probe: Monitor the zone going down/up.
putprobe $account "{
    \"skipauthz\": true,
    \"group\": \"$group_uuid\",
    \"name\": \"dapi zone up\",
    \"type\": \"machine-up\",
    \"agent\": \"$zonename\"
}"

# Probe: Monitor the dapi service stopping.
# TODO: use an smf probe type when available.
putprobe $account "{
    \"skipauthz\": true,
    \"group\": \"$group_uuid\",
    \"name\": \"dapi service stopped\",
    \"type\": \"log-scan\",
    \"agent\": \"$zonename\",
    \"config\": {
        \"path\": \"/var/svc/log/smartdc-site-dapi:default.log\",
        \"match\": {
            \"pattern\": \"Stopping because\"
        }
    }
}"

# raise alarm if zone datasets start running out of space
putprobe $account "{
    \"skipauthz\": true,
    \"group\": \"$group_uuid\",
    \"name\": \"root dataset running low on space\",
    \"type\": \"disk-usage\",
    \"agent\": \"$zonename\",
    \"config\": {
        \"path\": \"/\"
    }
}"

# raise an alarm if server objects are being filtered out of requests
# because they are malformed
putprobe $account "{
    \"skipauthz\": true,
    \"group\": \"$group_uuid\",
    \"name\": \"dapi saw malformed server object in request\",
    \"type\": \"log-scan\",
    \"agent\": \"$zonename\",
    \"config\": {
        \"path\": \"/var/svc/log/smartdc-site-dapi:default.log\",
        \"match\": {
            \"pattern\": \"Skipping server in request\"
        }
    }
}"

# raise an alarm if server objects are being filtered out of requests
# because they are malformed
putprobe $account "{
    \"skipauthz\": true,
    \"group\": \"$group_uuid\",
    \"name\": \"dapi assumed filled server due to missing cpu_cap\",
    \"type\": \"log-scan\",
    \"agent\": \"$zonename\",
    \"config\": {
        \"path\": \"/var/svc/log/smartdc-site-dapi:default.log\",
        \"match\": {
            \"pattern\": \"Server .{36} VM .{36} has no cpu_cap\",
            \"type\": \"regex\"
        }
    }
}"
