---
title: Designation API (DAPI)
apisections: Boiled Eggs
markdown2extras: wiki-tables, code-friendly
---

# DAPI

* Repository: git@git.joyent.com:dapi.git
* Browsing: <https://mo.joyent.com/dapi>
* Who: <https://mo.joyent.com/docs/dapi>
* Tickets/bugs: <https://devhub.joyent.com/jira/browse/DAPI>


# Introduction to Designation API

## What is DAPI?

The Designation API's purpose is to respond with the UUID of a compute node on
which to place a new machine or machine reservation. It needs to be passed a
full payload of the machine in question, the server role, IP address required,
dataset required, and quota. (At least).

## Design & Requirements

* DAPI should support multiple allocation algorithms. Starting with "random"
  and then adding scope for things like "random within this set of compute
  nodes".
* Data that DAPI shoudl take into account when selecting a machine (depending
  on algorithm):
    - Amount of RAM available
    - Amount of DISK available
    - Load (avg?) - ie, dont place new machines onto a "hot" box
    - Is the machine being purged? Compute nodes may be in the process of
      being shut down? (this may be a state that cnapi will just control)
* Users may be able to select a placement "policy". This policy will determine
  which algorithm is used. For example, they may be building HA postgres setup.
  They will want machines to be within the same availability zone, but not on
  the same CN.
* The concept of distance between servers. If I want to be able to define a
* bunch of costs / weights of being close / far away in terms of physical
* machine placement. This includes. Same CN, Same Role, Same Rack, Different
* Rack, Different electrical circuit, different switch. Kind of complicated.
* For things like determining "distance" between compute nodes, we may want to
  consider assigning weights to certain CN properties. ex: a different rack is
  worth 1000, a different compute node, is worth 100. This would be like a
  route metric - and the concept is familiar

# Getting Started

    # Get the source and build.
    git clone git@git.joyent.com:dapi.git
    cd dapi/
    make all

    # Setup config.
    # Note that there is a dependency on a headnode instance with a running UFDS
    cp config.mac.json config.json
    vi config.json

    # node server.js


# Boiled Eggs

{{Overview of this section of the API.}}

## CreateEgg (POST /eggs)

TODO

## ListEggs (GET /eggs)

TODO

## GetEgg (GET /eggs/:uuid)

TODO



